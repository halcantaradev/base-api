generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pessoa {
  id           Int      @id @default(autoincrement())
  nome         String   @unique
  cnpj         String   @unique
  endereco     String?
  cep          String?
  bairro       String?
  cidade       String?
  uf           String?
  categoria_id Int?
  ativa        Boolean  @default(true)
  created_at   DateTime @default(now())
  updateda_at  DateTime @updatedAt

  empresas_has_usuarios  EmpresasHasUsuarios[]
  pessoas_has_tipos      PessoasHasTipos[]
  pessoas_has_unidades   PessoasHasUnidades[]
  unidade                Unidade[]
  cargos_has_permissoes  CargosHasPermissoes[]
  usuario_has_permissoes UsuarioHasPermissoes[]
  contatos               Contato[]

  @@map("pessoas")
}

model TiposPessoa {
  id          Int      @id @default(autoincrement())
  nome        String   @unique
  descricao   String   @unique
  ativo       Boolean  @default(true)
  created_at  DateTime @default(now())
  updateda_at DateTime @updatedAt

  pessoas_has_tipos PessoasHasTipos[]

  @@map("tipos_pessoas")
}

model Cargo {
  id                    Int                   @id @default(autoincrement())
  nome                  String                @unique
  ativo                 Boolean               @default(true)
  created_at            DateTime              @default(now())
  updateda_at           DateTime              @updatedAt
  empresas_has_usuarios EmpresasHasUsuarios[]
  cargos_has_permissoes CargosHasPermissoes[]

  @@map("cargos")
}

model PessoasHasTipos {
  id          Int         @id @default(autoincrement())
  pessoa_id   Int
  tipo_id     Int
  pessoa      Pessoa      @relation(fields: [pessoa_id], references: [id])
  tipo        TiposPessoa @relation(fields: [tipo_id], references: [id])
  created_at  DateTime    @default(now())
  updateda_at DateTime    @updatedAt

  pessoas_has_unidades PessoasHasUnidades[]

  @@map("pessoas_has_tipo")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  nome        String
  username    String   @unique
  password    String
  secret      String   @default(uuid())
  ativo       Boolean  @default(true)
  created_at  DateTime @default(now())
  updateda_at DateTime @updatedAt

  empresas_has_usuarios  EmpresasHasUsuarios[]
  usuario_has_permissoes UsuarioHasPermissoes[]

  @@map("usuarios")
}

model EmpresasHasUsuarios {
  id          Int      @id @default(autoincrement())
  usuario_id  Int
  empresa_id  Int
  cargo_id    Int
  created_at  DateTime @default(now())
  updateda_at DateTime @updatedAt

  user   User   @relation(fields: [usuario_id], references: [id])
  pessoa Pessoa @relation(fields: [empresa_id], references: [id])
  cargo  Cargo  @relation(fields: [cargo_id], references: [id])

  @@map("empresas_has_usuarios")
}

model Unidade {
  id            Int      @id @default(autoincrement())
  condominio_id Int
  codigo        String   @unique
  ativo         Boolean  @default(true)
  created_at    DateTime @default(now())
  updateda_at   DateTime @updatedAt

  PessoasHasUnidades PessoasHasUnidades[]
  Notificacao        Notificacao[]

  pessoa Pessoa @relation(fields: [condominio_id], references: [id])

  @@map("unidades")
}

model PessoasHasUnidades {
  id             Int      @id @default(autoincrement())
  unidade_id     Int
  pessoa_id      Int
  pessoa_tipo_id Int
  created_at     DateTime @default(now())
  updateda_at    DateTime @updatedAt

  pessoa            Pessoa          @relation(fields: [pessoa_id], references: [id])
  unidade           Unidade         @relation(fields: [unidade_id], references: [id])
  pessoas_has_tipos PessoasHasTipos @relation(fields: [pessoa_tipo_id], references: [id])

  @@map("pessoas_has_unidades")
}

model TipoInfracao {
  id          Int      @id @default(autoincrement())
  descricao   String   @unique
  ativo       Boolean  @default(true)
  created_at  DateTime @default(now())
  updateda_at DateTime @updatedAt

  notificacao Notificacao[]

  @@map("tipos_infracao")
}

model Notificacao {
  id                  Int      @id @default(autoincrement())
  unidade_id          Int
  infracao_id         Int
  tipo_registro       Int      @default(1)
  data_emissao        DateTime @default(now())
  data_infracao       DateTime @default(now())
  n_notificacao       String
  detalhes_infracao   String
  fundamentacao_legal String   @db.Text
  observacao          String   @default("") @db.Text
  ativo               Boolean  @default(true)
  created_at          DateTime @default(now())
  updateda_at         DateTime @updatedAt

  unidade       Unidade      @relation(fields: [unidade_id], references: [id])
  tipo_infracao TipoInfracao @relation(fields: [infracao_id], references: [id])

  @@map("notificacoes")
}

model Permissoes {
  id                     Int                    @id @default(autoincrement())
  label                  String
  key                    String
  message                String
  active                 Boolean                @default(true)
  created_at             DateTime               @default(now())
  updateda_at            DateTime               @updatedAt
  cargos_has_permissoes  CargosHasPermissoes[]
  usuario_has_permissoes UsuarioHasPermissoes[]

  @@map("permissoes")
}

model CargosHasPermissoes {
  cargo_id     Int
  permissao_id Int
  empresa_id   Int
  createdAt    DateTime @default(now())
  updateda_at  DateTime @updatedAt

  cargo     Cargo      @relation(fields: [cargo_id], references: [id])
  empresa   Pessoa     @relation(fields: [empresa_id], references: [id])
  permissao Permissoes @relation(fields: [permissao_id], references: [id])

  @@id([cargo_id, permissao_id, empresa_id])
  @@map("cargos_has_permissoes")
}

model UsuarioHasPermissoes {
  usuario_id   Int
  permissao_id Int
  empresa_id   Int
  createdAt    DateTime @default(now())
  updateda_at  DateTime @updatedAt

  usuario   User       @relation(fields: [usuario_id], references: [id])
  empresa   Pessoa     @relation(fields: [empresa_id], references: [id])
  permissao Permissoes @relation(fields: [permissao_id], references: [id])

  @@id([usuario_id, permissao_id, empresa_id])
  @@map("usuario_has_permissoes")
}

model Contato {
  id            Int     @id @default(autoincrement())
  contato       String  @unique
  descricao     String  @unique
  ativo         Boolean @default(true)
  tipo_registro Int     @default(1)
  pessoa_id     Int

  pessoa Pessoa @relation(fields: [pessoa_id], references: [id])

  @@map("contatos")
}
