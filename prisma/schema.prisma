generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pessoa {
  id           Int      @id @default(autoincrement())
  nome         String   @unique
  cnpj         String   @unique
  endereco     String?
  cep          String?
  bairro       String?
  cidade       String?
  uf           String?
  categoria_id Int?
  ativa        Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  contatos            Contato[]
  unidades_condominio Unidade[]
  tipos               PessoasHasTipos[]
  unidades            PessoasHasUnidades[]
  usuarios_empresa    EmpresasHasUsuarios[]
  permissoes_cargos   CargosHasPermissoes[]
  permissoes_usuarios UsuarioHasPermissoes[]
  departamentos       Departamento[]
  notificacoes        Notificacao[]

  @@map("pessoas")
}

model TiposPessoa {
  id         Int      @id @default(autoincrement())
  nome       String   @unique
  descricao  String   @unique
  ativo      Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  pessoas  PessoasHasTipos[]
  unidades PessoasHasUnidades[]

  @@map("tipos_pessoas")
}

model Cargo {
  id         Int      @id @default(autoincrement())
  nome       String   @unique
  ativo      Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  usuarios   EmpresasHasUsuarios[]
  permissoes CargosHasPermissoes[]

  @@map("cargos")
}

model PessoasHasTipos {
  id                 Int      @id @default(autoincrement())
  pessoa_id          Int
  original_pessoa_id Int?
  tipo_id            Int
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  pessoa Pessoa      @relation(fields: [pessoa_id], references: [id])
  tipo   TiposPessoa @relation(fields: [tipo_id], references: [id])

  @@map("pessoas_has_tipo")
}

model User {
  id                         Int      @id @default(autoincrement())
  email                      String   @unique
  nome                       String
  username                   String   @unique
  password                   String
  secret                     String   @default(uuid())
  ativo                      Boolean  @default(true)
  acessa_todos_departamentos Boolean  @default(false)
  created_at                 DateTime @default(now())
  updated_at                 DateTime @updatedAt

  empresas      EmpresasHasUsuarios[]
  permissoes    UsuarioHasPermissoes[]
  departamentos UsuarioHasDepartamentos[]

  @@map("usuarios")
}

model EmpresasHasUsuarios {
  id         Int      @id @default(autoincrement())
  usuario_id Int
  empresa_id Int
  cargo_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  usuario User   @relation(fields: [usuario_id], references: [id])
  empresa Pessoa @relation(fields: [empresa_id], references: [id])
  cargo   Cargo  @relation(fields: [cargo_id], references: [id])

  @@map("empresas_has_usuarios")
}

model Unidade {
  id                  Int      @id @default(autoincrement())
  original_unidade_id Int?
  condominio_id       Int
  codigo              String   @unique
  ativo               Boolean  @default(true)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  condominos   PessoasHasUnidades[]
  notificacoes Notificacao[]

  condominio Pessoa @relation(fields: [condominio_id], references: [id])

  @@map("unidades")
}

model PessoasHasUnidades {
  id             Int      @id @default(autoincrement())
  unidade_id     Int
  pessoa_id      Int
  pessoa_tipo_id Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  condomino Pessoa      @relation(fields: [pessoa_id], references: [id])
  unidade   Unidade     @relation(fields: [unidade_id], references: [id])
  tipo      TiposPessoa @relation(fields: [pessoa_tipo_id], references: [id])

  @@map("pessoas_has_unidades")
}

model TipoInfracao {
  id         Int      @id @default(autoincrement())
  descricao  String   @unique
  ativo      Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  notificacoes Notificacao[]

  @@map("tipos_infracao")
}

model Notificacao {
  id                  Int       @id @default(autoincrement())
  unidade_id          Int
  pessoa_id           Int
  tipo_infracao_id    Int
  tipo_registro       Int       @default(1)
  data_emissao        DateTime  @default(now())
  data_infracao       DateTime  @default(now())
  codigo              String
  detalhes_infracao   String
  fundamentacao_legal String    @db.Text
  observacoes         String?   @db.Text
  valor_multa         Float?
  competencia_multa   String?
  unir_taxa           Boolean   @default(false)
  vencimento_multa    DateTime?
  ativo               Boolean   @default(true)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  unidade       Unidade      @relation(fields: [unidade_id], references: [id])
  pessoa        Pessoa       @relation(fields: [pessoa_id], references: [id])
  tipo_infracao TipoInfracao @relation(fields: [tipo_infracao_id], references: [id])

  @@map("notificacoes")
}

model Permissoes {
  id         Int      @id @default(autoincrement())
  label      String
  key        String
  message    String
  active     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  cargos   CargosHasPermissoes[]
  usuarios UsuarioHasPermissoes[]
  menus    Menu[]

  @@map("permissoes")
}

model CargosHasPermissoes {
  cargo_id     Int
  permissao_id Int
  empresa_id   Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  cargo     Cargo      @relation(fields: [cargo_id], references: [id])
  empresa   Pessoa     @relation(fields: [empresa_id], references: [id])
  permissao Permissoes @relation(fields: [permissao_id], references: [id])

  @@id([cargo_id, permissao_id, empresa_id])
  @@map("cargos_has_permissoes")
}

model UsuarioHasPermissoes {
  usuario_id   Int
  permissao_id Int
  empresa_id   Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  usuario   User       @relation(fields: [usuario_id], references: [id])
  empresa   Pessoa     @relation(fields: [empresa_id], references: [id])
  permissao Permissoes @relation(fields: [permissao_id], references: [id])

  @@id([usuario_id, permissao_id, empresa_id])
  @@map("usuario_has_permissoes")
}

model Arquivo {
  id            Int      @id @default(autoincrement())
  url           String
  origem        Int
  referencia_id Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("arquivos")
}

model Contato {
  id        Int     @id @default(autoincrement())
  contato   String  @unique
  descricao String  @unique
  ativo     Boolean @default(true)
  tipo      Int     @default(1)
  pessoa_id Int

  pessoa Pessoa @relation(fields: [pessoa_id], references: [id])

  @@map("contatos")
}

model Menu {
  id           Int     @id @default(autoincrement())
  label        String
  url          String? @unique
  permissao_id Int?
  icon         String
  target       String
  menu_id      Int?
  ativo        Boolean @default(true)

  menu  Menu?  @relation("Menus", fields: [menu_id], references: [id])
  items Menu[] @relation("Menus")

  permissao Permissoes? @relation(fields: [permissao_id], references: [id])

  @@map("menus")
}

model Departamento {
  id         Int     @id @default(autoincrement())
  nome       String
  empresa_id Int
  nac        Boolean @default(false)
  ativo      Boolean @default(true)
  excluido   Boolean @default(false)

  empresa Pessoa @relation(fields: [empresa_id], references: [id])

  usuarios UsuarioHasDepartamentos[]

  @@map("departamentos")
}

model UsuarioHasDepartamentos {
  usuario_id      Int
  departamento_id Int
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  usuario      User         @relation(fields: [usuario_id], references: [id])
  departamento Departamento @relation(fields: [departamento_id], references: [id])

  @@id([usuario_id, departamento_id])
  @@map("usuario_has_departamentos")
}
